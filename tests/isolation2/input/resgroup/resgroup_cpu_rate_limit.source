-- start_ignore
DROP VIEW IF EXISTS busy;
DROP VIEW IF EXISTS cancel_all;
DROP TABLE IF EXISTS bigtable;
DROP ROLE IF EXISTS role1_cpu_test;
DROP ROLE IF EXISTS role2_cpu_test;
DROP RESOURCE GROUP rg1_cpu_test;
DROP RESOURCE GROUP rg2_cpu_test;
DROP LANGUAGE IF EXISTS plpythonu;
CREATE EXTENSION plcontainer;
CREATE LANGUAGE plpythonu;
ALTER RESOURCE GROUP default_group SET memory_limit 1;
ALTER RESOURCE GROUP admin_group SET memory_limit 10;
-- end_ignore

-- plcontainer busy function.
CREATE OR REPLACE FUNCTION plbusy() RETURNS VOID AS $$
# container: plc_python_shared
n=100000000000
p=2
while p <= n:
	for i in range(2, p):
		if p%i == 0:
			p=p+1	
	p=p+1
$$ LANGUAGE plcontainer;

DROP TABLE IF EXISTS cpu_usage_samples;
CREATE TABLE cpu_usage_samples (sample text);

-- fetch_sample: select cpu_usage from gp_toolkit.gp_resgroup_status
-- and dump them into text in json format then save them in db for
-- further analysis.
CREATE OR REPLACE FUNCTION fetch_sample() RETURNS text AS $$
import pygresql.pg as pg
import json

conn = pg.connect(dbname="isolation2resgrouptest")
group_cpus = conn.query("select rsgname, cpu_usage from gp_toolkit.gp_resgroup_status")\
                 .getresult()
json_text = json.dumps(dict([(name, json.loads(cpu)) for name, cpu in group_cpus]))
sql = "insert into cpu_usage_samples values ('{value}')".format(value=json_text)
conn.query(sql)
return json_text
$$ LANGUAGE plpythonu;

-- verify_cpu_usage: calculate each QE's average cpu usage using all the data in
-- the table cpu_usage_sample. And compare the average value to the expected value.
-- return true if the practical value is close to the expected value.
CREATE OR REPLACE FUNCTION verify_cpu_usage(groupname TEXT, expect_cpu_usage INT, err_rate INT)
RETURNS BOOL AS $$
import pygresql.pg as pg
import json

conn = pg.connect(dbname="isolation2resgrouptest")

def add_vector(vec1, vec2):
    r = dict()
    for seg_id1, value1 in vec1.items():
        r[seg_id1] = value1 + vec2[seg_id1]
    return r


def verify_cpu_usage():
    all_info = conn.query("select sample from cpu_usage_samples").getresult()
    usage_sum = reduce(add_vector, [json.loads(info)[groupname] for info, in all_info])
    usage = [(float(v) / len(all_info)) for k, v in usage_sum.items() if k != "-1"]
    avg = sum(usage) / len(usage)
    return abs(avg - expect_cpu_usage) <= err_rate

return verify_cpu_usage()
$$ LANGUAGE plpythonu;

CREATE TABLE bigtable AS
    SELECT i AS c1, 'abc' AS c2
    FROM generate_series(1,50000) i;

CREATE VIEW busy AS
    SELECT count(*)
    FROM
    bigtable t1,
    bigtable t3
    WHERE 0 = (t1.c1 % 2 + 10000)!
      AND 0 = (t3.c1 % 2 + 10000)!
    ;

CREATE VIEW cancel_all AS
    SELECT pg_cancel_backend(procpid)
    FROM pg_stat_activity
    WHERE current_query LIKE 'SELECT * FROM busy%' or current_query LIKE 'SELECT plbusy%';



CREATE TABLE a1(i int);
insert into a1 select generate_series(1,1000);


ALTER RESOURCE GROUP admin_group SET cpu_rate_limit 1;
-- ALTER RESOURCE GROUP admin_group SET cpu_rate_limit 30;
ALTER RESOURCE GROUP plgroup SET cpu_rate_limit 20;

CREATE RESOURCE GROUP rg1_cpu_test WITH (concurrency=20, cpu_rate_limit=20, memory_limit=20);
CREATE RESOURCE GROUP rg2_cpu_test WITH (concurrency=20, cpu_rate_limit=20, memory_limit=20);
--
-- now we get prepared.
--
-- on empty load the cpu usage shall be 0%
--
-- create two roles and assign them to above groups
CREATE ROLE role1_cpu_test RESOURCE GROUP rg1_cpu_test;
CREATE ROLE role2_cpu_test RESOURCE GROUP rg2_cpu_test;
GRANT ALL ON busy TO role1_cpu_test;
GRANT ALL ON a1 TO role2_cpu_test;
-- prepare parallel queries in the two groups
11: SET ROLE TO role1_cpu_test;
12: SET ROLE TO role2_cpu_test;
13: SET ROLE TO role2_cpu_test;
14: SET ROLE TO role2_cpu_test;
15: SET ROLE TO role2_cpu_test;
16: SET ROLE TO role2_cpu_test;
17: SET ROLE TO role2_cpu_test;
18: SET ROLE TO role2_cpu_test;
19: SET ROLE TO role2_cpu_test;

11: SET optimizer = off;
12: SET optimizer = off;
13: SET optimizer = off;
14: SET optimizer = off;
15: SET optimizer = off;
16: SET optimizer = off;
17: SET optimizer = off;
18: SET optimizer = off;
19: SET optimizer = off;

--
-- a group should burst to use all the cpu usage
-- when it's the only one with running queries.
--
-- however the overall cpu usage is controlled by a GUC
-- gp_resource_group_cpu_limit which is 90% by default.
--
-- so the cpu usage shall be 90%
--

11&: SELECT * FROM busy;
12&: SELECT plbusy() from a1;
13&: SELECT plbusy() from a1;
14&: SELECT plbusy() from a1;
15&: SELECT plbusy() from a1;
16&: SELECT plbusy() from a1;
17&: SELECT plbusy() from a1;
18&: SELECT plbusy() from a1;
19&: SELECT plbusy() from a1;

-- start_ignore
TRUNCATE TABLE cpu_usage_samples;
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
TRUNCATE TABLE cpu_usage_samples;
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
-- end_ignore

SELECT verify_cpu_usage('plgroup', 40, 10);

-- start_ignore
SELECT * FROM cancel_all;
11<:
12<:
13<:
14<:
15<:
16<:
17<:
18<:
19<:

ALTER RESOURCE GROUP rg1_cpu_test SET cpu_rate_limit 1;
ALTER RESOURCE GROUP rg1_cpu_test SET memory_limit 1;
ALTER RESOURCE GROUP rg2_cpu_test SET cpu_rate_limit 1;
ALTER RESOURCE GROUP rg2_cpu_test SET memory_limit 1;
-- end_ignore

